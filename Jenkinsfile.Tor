pipeline {
	agent {
		node {
			label 'master'
		}
	}

	stages {
		stage('prep') {
			steps {
				script {
					if (env.BRANCH_NAME.startsWith('release')) {
						echo "======== Release branch execute this pipeline ========"
						env.PORT = 7293
					} else if (env.BRANCH_NAME == 'develop' || env.BRANCH_NAME.startsWith('feature')) {
						echo "======== Develop or Feature branch execute this pipeline ========"
						env.PORT = 5234
					}
					env.TAG = "${env.BRANCH_NAME}_${env.BUILD_NUMBER}"
				}
				sh """
					sed -i 's/{PORT}/${env.PORT} /' ./torrc
					cat torrc
					"""
			}
		}
		stage('Build a docker image') {
			steps {
				sh """
					docker build --build-arg PORT=${env.PORT} -t avzini/tor-socks-proxy:${env.TAG} .
                    """
			}
		}
		stage('Push the docker image to docker hub') {
			steps {
				withCredentials([string(credentialsId: '1a2bf80b-957e-4629-bc30-2b9d3cd4fbb2', variable: 'dockerPassword')]) {
					sh """
					docker login -u avzini -p ${dockerPassword}
					docker push avzini/tor-socks-proxy:${env.TAG}
					docker rmi avzini/tor-socks-proxy:${env.TAG} || true
                    """
				}
			}
		}
	}
	post {
		success {
			echo "======== Trigger Jenkinsfile.Test ========"
			build job: '../socks-proxy-test',
					parameters: [
							[$class: 'StringParameterValue', name: 'Image', value: "${env.TAG}"],
							[$class: 'StringParameterValue', name: 'PORT', value: "${env.PORT}"]
					], propagate: false

		}
	}
}
