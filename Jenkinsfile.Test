pipeline {
	agent {
		node {
			label 'master'
		}
	}

	parameters {
		string(defaultValue: '9150', description: 'PORT', name: 'PORT')
		extendedChoice(bindings: '', description: '', groovyClasspath: '', groovyScriptFile: '/var/jenkins_home/workspace/socks-proxy-test/fetchingImage.groovy', multiSelectDelimiter: ',', name: 'Image', quoteValue: false, saveJSONParameterToFile: false, type: 'PT_SINGLE_SELECT', visibleItemCount: 20)
	}

	stages {
		stage('prep') {
			steps {
				script {
					if (env.BRANCH_NAME.startsWith('release') || "${params.PORT}".toString() == '7293' ) {
						echo 'I only execute on the release branch'
						env.PORT = 7293
					} else if (env.BRANCH_NAME == 'develop' || env.BRANCH_NAME.startsWith('feature') || "${params.PORT}".toString() == '5234') {
						echo 'I execute develop or feature'
						env.PORT = 5234
					}
				}
			}
		}
		stage('Build a docker image') {
			steps {
				sh """
					docker login -u avzini -p TUMrWrD9VNyHTah
					docker pull avzini/tor-socks-proxy:${params.Image}
                    """
			}
		}
		stage('Build & Run tor-socks-proxy image') {
			steps {
				sh """
					docker build -t tor-socks-proxy .
					docker rm tor-socks-proxy-${PORT}
					docker run -d --name tor-socks-proxy-${PORT} -p 127.0.0.1:${PORT}:9150 avzini/tor-socks-proxy:${params.Image}
                    """
			}
		}
		stage('Build & Run ping image') {
			steps {
				sh """
					docker build -t ping_tor -f Dockerfile_PingTor .
					docker run --rm --net host ping_tor:latest --port ${PORT}
                    """
			}
		}
	}
}